## Pre-render experiment (branch: pre-render)

The purpose of this branch is to see if pre-rendered graphics perform better. The general approach will be to create P5 buffers with createGraphics() for every graphical element in the game. Then all rendering will be done with image().


2020-05-22:

- Added a crude FPS counter that turns red whenever the FPS drops below 50. CPU usage consistantly reads between 65% and 70%.

- The paddle, ball, and bricks are now all pre-rendered. No noticable increase in performance. FPS counter flash red about as much as it did before.

- Adjusted things so that the canvas no longer takes up the entire page. There's no reason for it to consume the entire page because nothing is drawn outside the play area. Changed page background to black in index.html. FPS counter seems to turn red less often.


2020-05-23:

- Made several non-rendering specific changes to the code. I added a score counter and the Fira Mona font.

- Decided to merge this branch back into master and rename this file to 'devlog.txt'.

## END Pre-render experiment (branch: pre-render)


2020-05-24:

- Merged changes from the pre-render branch into master.

- Added a new array to store level building functions. Added a new property called 'level' to the gameConfig object.

- Added a new function called resetGame(). This clears the balls[] and bricks[] arrays, sets the level to 0, sets the score to 0, and runs the level 0 setup function. It also puts the paddle back in the center of the screen, and positions a newly created ball over it.

- The Quit menu in the Pause screen now properly resets the game with the resetGame() function. When the player Quits the game and then clicks/taps the Start button on the title screen, the game starts over properly.

- Added a black line to balls and bricks to help with contrast against bright backgrounds.

- Added a new function called makeCountdown(). It makes a new object with its own iterate() and end() methods. It takes a start value, a tick value, and a function to fire when the countdown ends. Note that the third argument MUST be the function itself! Define a named function and pass it as the third parameter without the parentheses (no "()"). Tested with console.log statements, works perfectly.

- Made the countdown show 3..2..1..Go! values to the user without showing "-1".


2020-05-26:

- Added particle effects! Now whenever a brick is destroyed, the player is treated to an explosion of white particles. The particles are actually tiny squares.

- Updated the calls to shapeObj.draw() in sketch.draw() to use a given shape's own 'shapeName' property to find its buffer in shapeBuffers. This will basically make adding game objects of different colors a LOT easier going forward.


2020-05-27:

- Wrote a new function called levelReader(). Now levels can be written in the form of nested arrays. The inner arrays contain brick numbers, which are fed through a 'switch' statement to determine what brick to generate. If a value doesn't match, then no brick is generated. Also, every other row is staggered, which makes levels more interesting.

- Added a bunch of different colored bricks.

- Made a few minore adjustments to audio volume and the effect files. Removed most of the reverb/echo from hitWall.ogg. Shortened hitPaddle.ogg and added a slight fade out. Reducing the hitWall.ogg effect to about 20% volume, and reducing the other 2 effects to 70% volume yields better results than before. Still don't like the hitPaddle.ogg effect. Maybe I'll replace it with a metallic bouncing sound later.

- The game now starts the next level when all of the bricks on the current level are destroyed. If there are no more levels, the game resets and the player is taken back to the title screen.

- The ball, brick, and particle arrays are now "garbage collected" after every frame. That is, the arrays are replaced with their 'Alive' counterparts every frame. If an object's 'alive' property is set to 'false', they don't get added to this intermeditate array and are effectively erased.


2020-05-28:

- Add life and level counters to the game.

- The game now resets the ball and paddle position when the player loses a life.

- When the player loses all of their lives, the game resets and puts the player back at the title screen.

- Game countdowns now have their own object. Now I can store multiple countdowns *and* refer to them by name. Each countdown also has their own activate() method, which eliminates pasting redundant `countdowns.cdName.active = true` statements all over the place. The activate() method sets its active property to 'true' AND sets the global countdownRunning variable to true. Countdowns also deactivate themselves just before firing their end() methods. This will allow for special countdowns and countdown-based objects further down the line.


## Coundown fix (branch: countdown)

- When I wrote the makeCountdown() function, I set it up to return an object that could be manipulated after initial creation. I used the same pattern to generate all of the other game objects. makePaddle(), for example, starts off by running makeBall() to return an object. Then that object is turned into a paddle with the rest of the statements in the function. But for some unknown reason, this DID NOT WORK for the makeCountdown() function. Objects generated with makeCountdown() OVERWROTE EACH OTHER. I couldn't figure it out, so I removed it. I'm going to try writing a generic showMessage() function first.

- Decided to write a function called showBarText(). It reduces the lines of code required for the three bar text elements (score, lives, and level).

- Decided to give message objects their own array. Message objects are generated with the makeMessage() function. They only have one method called showMessageText().

- In addition to showing the message text, msgObj.showMessageText() also checks its 'time' property. If msgObj.time is less than msgObj.maxTime, it shows the message with standard P5 text rendering and increments the 'time' property. When this condition is no longer true, the 'else' block sets msgObj.active to 'false'. After that, the same 'for' loop in the gameLoop() function used to run msgObj.showMessageText() on all 'active' message objects is also used to scrub inactive objects through array replacement.

- Added another feature to msgObj.showMessageText(): The endAction() method. Message objects now check if this method exists in the afformentioned 'else' block. If so, it will try to run msgObj.endAction() from within msgObj.showMessageText() after setting msgObj.active to 'false'.

- NOTE: The endAction() method is attached to a messge object AFTER it is created, but BEFORE it is added to messages array.


2020-05-29:

- Added a few more properties to the objects generated with makeMessage(). Changing those properties will now effect how msgObj.showMessageText() draws to the screen. That means I could potentially "spin off" this function into a bunch of other text elements.

- Added msgMaxTime property to the gameConfig object. makeMessage() now uses that property to determine the maximum amount of time a given message stays alive.

- Wrote a new function called makeResumeCountdown(). I started my making the threeCountMessage() obj with makeMessage. In the endAction() method of threeCountMessage(), I make the next message object in the chain, give it the appropriate endAction(), and then add that object to messages array. The end result is a slightly confusing nested structure with functions defined inside of other functions, but it works. In a nutsehll, threeCountMessage() makes twoCountMessage() when it dies. Then twoCountMessage() makes oneCountMessage() when it dies. Then oneCountMessage() makes goMessage() when it dies. Finally, goMessage() unpauses the game when it dies. Looks fluid from the point of the player.

- I think I solved it. The new makeResumeCountdown() function is running quite well. It works reliably when the player first starts the game, loses a ball, progresses to the next level, or unpauses the game. I think I can call this issue resolved. This branch will be merged into master.

## END Coundown fix (branch: countdown)



2020-05-30:

- Added the makeInvincibleBrick() function to the game and modified the "no bricks left" portion of simUpdate(). It no longer checks the length of the main bricks array. Instead, it now counts the number of normal bricks left and uses that when deciding to advance to the next level. When advancing to the next level, it clears the brick array before calling levelReader() on the next level.

- Changed the drawing function for bricks to reflect the HP by drawing smaller bricks on top of the base brick. It does this by painting the shape buffer multiple times with different dimensions. Not the best way to do it, but it works. Maybe I should make them change colors?

- Changed the drawing function for armored bricks to use different shape buffers to draw a single inner brick graphic. The colors run from black to gray to white. Black means 3 or more HP left. Gray means 2 and white means 1. It really does look better with just a single inner diamond instead of *one diamond per HP*.


2020-05-31:

- Brick collision resolution got its own function today called resolveBrickDamage(). It determines what sound to play when the ball hits a brick, and whether or not the brick dies. It will now also trigger an explosion of red sparks if the brick.type == "bomb".

- Made the first prototype bomb bricks. My initial idea was to do collision detection and resolution between the 'sparks' array and the 'bricks' array. This didn't work out very well because resolveBrickDamage() ended up being called instantaneously *and* continuously, resulting in never-ending calls to makeBombExplosion(), which generated even more calls to resolveBrickDamage(). Basically, the game froze and the 'sparks' array grew to over 1000 elements in just a few seconds. Not ideal.

  Instead, I made yet another array just to hold explosions. Each "explosion" contains an array of small objects (sparks that are never drawn) to run the collider() function against. The collider calls resolveBrickDamage(), which obviously damages any bricks present at the specified location. I added an extra nest 'for' loop to simUpdate(), right after resolving brick and ball collisions. At the end of that section, it clears the 'explosions' array. That means explosions are unable to exist beyond the frame that they spawn in, so no more *continuously adding elements to an array until the browser crashes*.

- Wrote a new function called makeBombExplosion(). It releases an explosion of "just for show" bomb sparks and adds "explosion" arrays to the main 'explosions' array. The red sparks are released as intended, but the surrounding bricks break before the sparks "time out". This is merely a problem with presentation. Easy to fix.

- Gave the explosion system and overhaul. 'explosions' is now 'explosionPoints', which are just non-drawing bombParticles. The particles are dropped into the explosionPoints array when a bombParticle dies. This made the explosion resolsution portion of simUpdate() simpler, and it made makeBombExplosion() function shorter. Just had to mess with maxDistance and speed until I found a combination that sucessfully dealt damage to adjacent bricks.

- Added a new bombBrick that calls makeBombExplosion() when it's destroyed.

- Turns out fiddling the maxDistance and speed variables in makeBombSpark() wasn't the answer, I noticed that the sparks were still missing their mark. So now makeBombSpark() takes additional X and Y values for the target. In makeBombExplosion, I use width and height values from a dummy brick object to manually set a target for each of the 8 sparks. What a pain. But now it works as expected. The bricks still don't get damaged until "after" the spark dies, but now the explosionPoints are created with exact target coordinates.


2020-06-01:

- Decided to change the armored bricks so that the inner diamond disappears when HP drops to 1. Also changed the default starting HP to 4.

- The '<canvas>' element that the game runs in now appears in the center of the screen with 'margin-left' and 'margin-right' set to 'auto'. That worked fine for the canvas, but added a new problem to solve: The buttons were in the wrong spot. Since the buttons are just plain HTML '<button>' elements rendered by P5js, I had to figure out how to get the value of 'margin-left' to apply a proper X offset. Once I found the relevent documentation online, I added a 'getCompStyle()' method directly to the 'gameConfig' object.

  That function uses either 'target.currentStyle' or 'window.getComputedStyle(target)' (whichever is available) to set 'gameConfig.compStyle'. It then sets 'gameConfig.buttonOffsetX' by running 'parseFloat(gameConfig.compStyle.marginLeft)'. The 'parseFloat()' call is necessary to remove the ".px" part and convert the string into a proper floating point value. Adding this value to the X position of a button fixes the problem. The buttons even move the correct spots when the browser window is resize.


2020-06-02:

- Wrote a new function called 'killPaddle()'. If the player has any lives left, it makes the paddle invisible, triggers a "MISS!" message. The 'endAction()' of that message pauses the game, resets the player, and fires 'makeResumeCountdown()'. So player sees the paddle disappear, then they see the message "MISS!", and then the paddle respawns with a new ball along with a countdown.

- Made the paddle "explode". Well, kind of. I added a call to 'makeEffectExplosion()', but the sparks didn't move when 'killPlayer()' was called. The problem turned out to be 'simUpdate()', which is resonsible for moving everything that appears on screen, particle effects included. So I had to rip out the entire "iterate over particles" section and put it after the 'if' statement that decides when to fire 'simUpdate()'. Now particle "explosions" display properly even if the game is paused, which is the first thing 'killPlayer()' does. The pause is necessary because the player and new ball shouldn't be allowed to move until *after* the whole "MISS!" -> respawn -> countdown sequence.

- Made the paddle explosion a bit more flashy. Now the number of calls to 'makeEffectExplosion()' are determined by how long the paddle is. I messed with the step value in the 'for' loop until I arrived at a value of 35. That's one explosion for every 35 pixels of 'player.width'. It plays a sound effect too, but it's reusing the 'ballHitBrick' sound effect. Maybe I'll change it.


2020-06-03:

- Added a couple of background images! Instead of painting the same boring background color over and over, the game now checks to see if a level has a background image. If so, it draws that at the start of each frame with a call to 'P5.image()'. I also wrote a 'for' loop that iterates over all of the level objects and draws their backgrounds to individual buffers. That means the backgrounds are pre-rendered just like everything else.

- I briefly experimented with a background '<div>' for displaying the images. This worked by modifying the 'background-image' property every time a new level was started. I guess CSS isn't fast enough to make the change without displaying an annoying flickering effect. Oh well. Redrawing the background every frame doesn't seem to impact performance too much. CPU usage still hovers between 70% and %80. I occasionally see 90%, but it drops back down. Also noticing slightly more lag, mainly on the second level with a lot more bricks.

- Added an outline to both with paddle and the ball to add better visibility.


2020-06-04:

- It's powerup day! I added a new array called 'powerups' to house the new powerup objects. I started by writing a new function called 'makePowerupGrowPaddle()'. Like all of the other shapes, I start with a pre-existing shape and modify its methods and properties. This time, I kicked things off with 'makeParticle()'. Every powerup will eventually have a unique shape, but I decided that they should all get a gray frame and a black background. To draw the arrows, I used the 'begineShape', 'vertex()', and 'endShape()' functions that P5js provides.

  Each powerup object has a method called 'effect()', which will modify the necessary global variables. In this case, it makes the paddle 15% wider. Off course, powerups don't just "appear". They have to be spawned when a brick is destroyed. So I modified 'resolveBrickDamage()' to check for 'brick.dropPowerup()'. If found, it tries to run it. I currently have this tacked on to the white bricks for testing, but I will add some code to 'resolveBrickDamage()' to randomly generate a powerup.

- Replaced the powerup drawing commands with a real PNG image! Had to modify the 'preload()' function to automaticly check whether or not a given shape had an image file to use as a sprite. If so, then it will now skip the 'makeShape()' function and load the image directly into the buffer.

- Gave the "grow paddle" powerup a yellow frame a green arrows to make it stand out more.

- Gave the paddle a 'maxWidth' property to prevent it from taking up the entire bottom of the screen.

- Made a new "shrink paddle" powerup. I had to give the paddle a 'minWidth' property for fairness. Wouldn't want the player's paddle to shrink down to nothing ;)

- Added a new function called 'pickPowerup()'. It randomly chooses one of the two powerups I have and drops it. The onscreen powerups are also cleared when the player loses a life, moves to the next level, or starts the game over.



## Preloader experiment (branch: preloader)

2020-06-05:

- Today, I made a new branch called 'preloader'. As I start to transition more into making graphical sprites, it only makes sense to add a preloader animation to my program. Or I suppose I could be lazy and write a big "Loading..." message that the game will draw on top of. There are many ways I could spin this.

- After viewing a neat video on a Coding Train YouTube Channel, I gave the convoluted "active loading" method a try. Now I have 3 new functions, 11 new global variables, and a new function called 'checkLoading()' just to check if everything is loaded. P5.draw()' calls 'checkLoading()' until it returns 'true'. Then the program plays just like before. If it returns 'false', then the loading screen is displayed over and over again. It's just a green screen with "Loading..." written across it. Maybe I'll jazz it up later with animation, but it will do for now.


## END Preloader experiment (branch: preloader)


2020-06-08:

- Decided to change background 5 to a mountain and moon at night. The water reflection isn't very good, but oh well. I'm still learning how to use the effects in Gimp.

- Decided to change how borders were drawn around the bricks. Instead of using the stroke functions in P5, I decided to draw 2 diamonds in the same spot, the main color over the outline shape. Once I figured out the math, I shrunk the borders down to a thickness of 2 pixels. Now the border only really shows up if the background color is bright. It's just enough for the eye to detect the edge of the shape.

- Added a new sound effect that plays whenever the player collects a powerup.

- Replaced the the JPEG powerup images with PNG files. The PNGs were smaller.

- Made the pause button exactly square by using gameConfig.uiBarHeight for width and height values. The X position is set to gameConfig.areaWidth - gameConfig.uiBarHeight, and the Y position is set to gameConfig.areaHeight - gameConfig.uiBarHeight.

- Life counter now won't show anything less than 0.

- Introduced a new "power down" function called 'makePowerupKillPaddle()', which kills the player by clearing the balls array. I tried to run 'killPaddle()' directly, but it gave me an error.


2020-06-09:

- Started messing around with the concept of "Special bricks". These are bricks with different functionality programmed into them on a level by level basis. Actually, they're functions that *spawn* bricks, but wathever. If a given level object has a 'specialBricks' array, 'levelReader()' will iterate over it after spawning all of the normal bricks. And of course each 'specialBrick' is a function for 'levelReader()' to execute. Furthermore, the functions that represent the special bricks don't return brick objects. Instead, they inject them directly into the 'bricks' array.

  The first special brick I made just bounces a regular brick back and forth diagonally within a 3x3 section of the grid. Maybe I'll break some of the code out into a seperate function to cut down on code duplication. Anyway, my next task will be to make a chain of invincible bricks that travels around a group of regular bricks. Basically, it's a shield for the first "boss battle".

- Added a white outline to black bricks so that they show up better when using dark backgrounds.

- Made "no border" versions of the gray, white, and black bricks for use on armored bricks.

- Added a new function called 'makeMovingBrickDiagonal()'. I just moved the bouncing brick code into it's own function. It even takes a 'distance' argument, which specifies how many multiples of brick height + padding and brick width + padding to move. It starts in the upper left corner of its bounding box and moves to the lower right corner. May add a bit more functionality later. This is also the first brick making function that takes another brick maker as a parameter! That means ANY brick can be a moving brick.

- Corrected all of the level backgrounds for 'gameConfig.uiBarHeight'.

- Moved brick updating and movement code from 'resolveBrickDamage()' to just after the call to 'simUpdate()' in 'gameLoop()'.

- Made a new UFO level with a sweet oscillating band of armored and invincible bricks. Kind of looks like it's spinning! I origianlly wanted to put 14 bricks in the band, but the invincible one turned out to be a little too much. The ball would always get stuck above the band. After a bit of playtesting, I settled on 10 bricks. It's still a bit annoying, but manageable.


2020-06-10:

- Found a good collection of sound effects on Open Game Art and replaced some of the sound effects.

- Added a new file called '3rdPartyResources.txt' to collect and maintain information on 3rd party resources used in the game.

- Added copyright information to the level background images using the Comments box on the Export dialog in Gimp.

- Made a simple undersea background for the next level.

- Move the XCF files into their own directory.

- Made a new level with a crab made of bricks.

- Made the UFO level a bit easier to clear by reducing the moving brick total to 8.

- Improved the ball/brick collision code so that moving bricks can no long "stab" the ball and push it into a wall. The problem was caused by a slight issue with Y axis adjustments on the ball.

- Modified 'makeInvincibleBrick()' so that the black bricks have HP set to 20. Also modified the code so that "invincible" bricks can take damage, the player doesn't need to destroy them to progress to the next level. These modification prevent infinite cycles, where a ball gets stuck bouncing between the wall and the same invincible brick.


2020-06-11:

- 'makeBrick.makeShape()' now only draws a second diamond over the first one if 'border' is greater than 0.

- Modified 'resetPlayer()' to clear the 'explosionPoints' array so that bomb brick chain-reactions do NOT resume after respawn.

- My game now has a unique name that doesn't show up in search results: Zaggmond!


2020-06-15:

- Added a new level background that kind of looks like a wall of dark gray bricks.

- Added an experimental level with a ring of armored and invincible bricks that "spins". It's a row of bricks that follow a rectangular path around the perimeter of the play area. Decided not to add it to the main 'Levels' array. To make the bricks "turn" the corners, I wrote a new function called 'makeMovingBrickRectPath()'. It's basically 'makeMovingBrickDiagonal' with a modified 'boundsCheck()' function.

- The ring of bricks gave me an idea for level-specific "special functions" that could be run by 'simUpdate()'. 'levelReader()' was updated to make sure that every level has a property called 'specialFucntion'. If not, then 'level.specialFunction' is added and set to the boolean 'false'. In 'simUpdate()' where the special function is called, it first checks 'level.specialFunction' with 'typeof' to make absolutely sure it is a function. Then it runs that function on every frame.

  Since each of the levels is a basic JavaScript object, it's easy to tack on level-specific methods and properties. I used this to make a ring of bricks that spawns in one brick at a time. All of the bricks are evenly spaced and alternate between regular and armored bricks. I originally made them all armored bricks, but found gameplay to be moderately difficult. Not quite "insane", but definitely enough to make even moderately seasoned players feel unwelcome.

  This experimental level doesn't have much of an inner body. Right now, I'm leaning towards making it a castle so that players might think the moving blocks are forming a moat. Not a bad concept.

- Decided to make a crown in the center of the new level.

- Messed around the brick border thickness and color. Improved visibility a little more.

- Added a new background image for the crown level. This time, I used the kaleidoscope distortion and Gaussian blur effects in Gimp on a simple brick-ish texture. The result looks sufficiently weird.


2020-06-16:

- Made a new level that I'm calling The Box. It was supposed to be the number 9, but I decided to make it look like a cube.

- Made the armored bricks a purple color to differentiate them a bit better from the other bricks

- Made the gray brick a darker shade of gray.

- Made the colors on armored bricks run from red to yellow to green. I think it looks more interesting.

- Chnaged the point values on the "grow paddle", "shrink paddle", and "kill paddle" powerups to 150, 250, and 1000 respectively.

- "Invincible" bricks now give 1000 points when destroyed. May motivate some players to destroy these difficult non-essential bricks.

- Discovered that the now purple armored bricks pose a visibility problem against the creepy treehouse background. On the UFO level, I replaced the treehouse (background #2) with the starry sky (background #1). Looks better and makes more sense.
