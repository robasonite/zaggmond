## Pre-render experiment (branch: pre-render

The purpose of this branch is to see if pre-rendered graphics perform better. The general approach will be to create P5 buffers with createGraphics() for every graphical element in the game. Then all rendering will be done with image().

2020-05-22:

- Added a crude FPS counter that turns red whenever the FPS drops below 50. CPU usage consistantly reads between 65% and 70%.
- The paddle, ball, and bricks are now all pre-rendered. No noticable increase in performance. FPS counter flash red about as much as it did before.
- Adjusted things so that the canvas no longer takes up the entire page. There's no reason for it to consume the entire page because nothing is drawn outside the play area. Changed page background to black in index.html. FPS counter seems to turn red less often.


2020-05-23:

- Made several non-rendering specific changes to the code. I added a score counter and the Fira Mona font.
- Decided to merge this branch back into master and rename this file to 'devlog.txt'.

## END Pre-render experiment (branch: pre-render


2020-05-24:

- Merged changes from the pre-render branch into master.
- Added a new array to store level building functions. Added a new property called 'level' to the gameConfig object.
- Added a new function called resetGame(). This clears the balls[] and bricks[] arrays, sets the level to 0, sets the score to 0, and runs the level 0 setup function. It also puts the paddle back in the center of the screen, and positions a newly created ball over it.
- The Quit menu in the Pause screen now properly resets the game with the resetGame() function. When the player Quits the game and then clicks/taps the Start button on the title screen, the game starts over properly.
- Added a black line to balls and bricks to help with contrast against bright backgrounds.
- Added a new function called makeCountdown(). It makes a new object with its own iterate() and end() methods. It takes a start value, a tick value, and a function to fire when the countdown ends. Note that the third argument MUST be the function itself! Define a named function and pass it as the third parameter without the parentheses (no "()"). Tested with console.log statements, works perfectly.
- Made the countdown show 3..2..1..Go! values to the user without showing "-1".


2020-05-26:

- Added particle effects! Now whenever a brick is destroyed, the player is treated to an explosion of white particles. The particles are actually tiny squares.
- Updated the calls to <shape>.draw() in sketch.draw() to use a given shape's own 'shapeName' property to find its buffer in shapeBuffers. This will basically make adding game objects of different colors a LOT easier going forward.


2020-05-27:

- Wrote a new function called levelReader(). Now levels can be written in the form of nested arrays. The inner arrays contain brick numbers, which are fed through a 'switch' statement to determine what brick to generate. If a value doesn't match, then no brick is generated. Also, every other row is staggered, which makes levels more interesting.
- Added a bunch of different colored bricks.
- Made a few minore adjustments to audio volume and the effect files. Removed most of the reverb/echo from hitWall.ogg. Shortened hitPaddle.ogg and added a slight fade out. Reducing the hitWall.ogg effect to about 20% volume, and reducing the other 2 effects to 70% volume yields better results than before. Still don't like the hitPaddle.ogg effect. Maybe I'll replace it with a metallic bouncing sound later.
